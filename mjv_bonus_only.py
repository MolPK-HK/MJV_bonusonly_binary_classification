# -*- coding: utf-8 -*-
"""MJV_Webアプリ_小役なし.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sjrqnVyFEAPvZCJ7hkdlUFi62WnXjOIc
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib
import os
import xgboost as xgb # モデルがXGBoostの場合、推論時にも必要になることがあります

# --- 定数定義 (モデル訓練時と同じものを使用) ---
MEDALS_PER_GAME_COST = 3
REPLAY_PROBABILITY = 1 / 7.3  # マイジャグラーVの一般的なリプレイ確率
PAYOUT_BIG_GROSS = 252      # BIGボーナス1回あたりの総獲得枚数
PAYOUT_REG_GROSS = 96       # REGボーナス1回あたりの総獲得枚数

@st.cache_data # 特徴量計算関数もキャッシュ可能ですが、入力が変わるたびに再計算が必要なのでここでは保留
def preprocess_inputs_for_streamlit(input_data_dict):
    """
    ユーザー入力の辞書（4つの基本情報）から、モデル予測に必要な5つの特徴量を計算する関数。
    """
    df = pd.DataFrame([input_data_dict])

    required_keys_type = {
        'num_games_simulated': int,
        'bb_count': int,
        'rb_count': int,
        'sashimai': int
    }
    for key, expected_type in required_keys_type.items():
        if key not in df.columns or pd.isna(df[key].iloc[0]):
            st.error(f"入力エラー: '{key}' の値が設定されていません。")
            return None
        try:
            df[key] = df[key].astype(expected_type)
        except ValueError:
            st.error(f"入力エラー: '{key}' の値が不正です。適切な数値を入力してください。")
            return None
        if key == 'num_games' and df[key].iloc[0] <= 0:
            st.error(f"入力エラー: '{key}' は正の整数である必要があります。")
            return None

    # --- 5つの基本特徴量の計算 ---
    # 'num_games' は入力からそのまま使用
    df['num_games'] = df['num_games_simulated']
    df['bb_rate'] = np.where(df['num_games'] > 0, df['bb_count'] / df['num_games'], 0)
    df['rb_rate'] = np.where(df['num_games'] > 0, df['rb_count'] / df['num_games'], 0)

    df['estimated_total_medals_in'] = df['num_games'] * (1 - REPLAY_PROBABILITY) * MEDALS_PER_GAME_COST
    df['estimated_total_medals_in'] = np.where(df['num_games'] > 0, df['estimated_total_medals_in'], 0).clip(min=0)
    df['calculated_total_medals_out'] = df['sashimai'] + df['estimated_total_medals_in']

    payout_from_bonuses = (df['bb_count'] * PAYOUT_BIG_GROSS) + (df['rb_count'] * PAYOUT_REG_GROSS)
    total_payout_from_small_wins = df['calculated_total_medals_out'] - payout_from_bonuses
    df['small_win_medals_per_game'] = np.where(
        df['num_games'] > 0,
        total_payout_from_small_wins / df['num_games'],
        0
    )
    df['small_win_medals_per_game'] = df['small_win_medals_per_game'].replace([np.inf, -np.inf], np.nan).fillna(0)

    df['machine_percentage_rpm'] = np.where(
        df['estimated_total_medals_in'] > 0,
        df['calculated_total_medals_out'] / df['estimated_total_medals_in'],
        1.0
    )
    df['machine_percentage_rpm'] = df['machine_percentage_rpm'].replace([np.inf, -np.inf], np.nan).fillna(1.0)

    feature_columns = ['num_games', 'bb_rate', 'rb_rate', 'small_win_medals_per_game', 'machine_percentage_rpm']

    # 特徴量が存在し、NaN/infがないことを確認
    for col in feature_columns:
        if col not in df.columns:
            st.error(f"エラー: 特徴量 '{col}' が生成されていません。計算過程を確認してください。")
            return None
        df[col] = df[col].replace([np.inf, -np.inf], np.nan).fillna(0)

    X_transformed = df[feature_columns]
    return X_transformed

# モデルの読み込みをキャッシュする
@st.cache_resource
def load_model(model_path):
    if not os.path.exists(model_path):
        st.error(f"モデルファイル '{model_path}' が見つかりません。パスを確認してください。")
        return None
    try:
        model = joblib.load(model_path)
        st.success(f"モデル '{model_path}' を正常に読み込みました。")
        return model
    except Exception as e:
        st.error(f"モデルの読み込み中にエラーが発生しました: {e}")
        return None

# --- Streamlit アプリのUI部分 ---
st.set_page_config(page_title="パチスロ設定判別アプリ", layout="wide")
st.title("マイジャグラーV 設定判別アプリ (2値分類)")
st.markdown("入力されたデータから、設定が「低中設定(1-3)」か「高中設定(4-6)」かを予測します。")

# ★★★ 学習済みモデルのファイルパスを指定 ★★★
MODEL_FILE_PATH = 'juggler_binary_classifier_final_5features.joblib' # ご自身のモデルファイル名に変更

# モデルを読み込む
trained_model = load_model(MODEL_FILE_PATH)

# サイドバーでユーザー入力を受け付ける
st.sidebar.header("遊技データを入力してください")
num_games_input = st.sidebar.number_input("総ゲーム数", min_value=1, value=3000, step=100, key="num_games")
bb_count_input = st.sidebar.number_input("総BIG回数", min_value=0, value=10, step=1, key="bb_count")
rb_count_input = st.sidebar.number_input("総REG回数", min_value=0, value=8, step=1, key="rb_count")
sashimai_input = st.sidebar.number_input("差枚 (例: +1000, -500)", value=0, step=50, key="sashimai")

# 予測ボタン
if st.sidebar.button("設定グループを判別する", type="primary"):
    if trained_model is not None:
        user_inputs_dict = {
            'num_games': num_games_input, # preprocess関数が期待するキーに合わせる
            'bb_count': bb_count_input,
            'rb_count': rb_count_input,
            'sashimai': sashimai_input
        }

        st.markdown("---")
        st.subheader("入力データ:")
        st.json({k: v for k,v in user_inputs_dict.items()}) # 入力値を表示

        # 特徴量へ変換
        features_for_prediction = preprocess_inputs_for_streamlit(user_inputs_dict)

        if features_for_prediction is not None:
            st.subheader("計算された特徴量 (モデル入力用):")
            st.dataframe(features_for_prediction)

            try:
                # 予測の実行
                prediction_label_encoded = trained_model.predict(features_for_prediction)[0]
                predicted_probabilities = trained_model.predict_proba(features_for_prediction)[0]

                class_names = ['設定1-3グループ (低中設定)', '設定4-6グループ (高中設定)']
                predicted_class_name = class_names[prediction_label_encoded]

                st.subheader("📈 予測結果")
                st.markdown(f"**判別されたグループ:** <span style='font-size:1.5em; color:blue;'>{predicted_class_name}</span>", unsafe_allow_html=True)

                col1, col2 = st.columns(2)
                with col1:
                    st.metric(label=f"'{class_names[0]}' である確率", value=f"{predicted_probabilities[0]:.2%}")
                with col2:
                    st.metric(label=f"'{class_names[1]}' である確率", value=f"{predicted_probabilities[1]:.2%}")

                if predicted_probabilities[1] > 0.75:
                    st.success("高中設定グループの可能性が非常に高いです。")
                elif predicted_probabilities[1] > 0.60:
                    st.info("高中設定グループの可能性があります。")
                elif predicted_probabilities[0] > 0.75:
                    st.success("低中設定グループの可能性が非常に高いです。")
                elif predicted_probabilities[0] > 0.60:
                    st.info("低中設定グループの可能性があります。")
                else:
                    st.warning("予測の確信度は中間的です。")

            except Exception as e:
                st.error(f"予測の実行中にエラーが発生しました: {e}")
        else:
            st.error("特徴量の生成に失敗しました。入力値を確認してください。")
    else:
        st.error("モデルが読み込まれていません。上記のモデルファイルパスを確認し、Streamlitを再起動してください。")

st.sidebar.markdown("---")
st.sidebar.markdown("このアプリは機械学習モデルによる予測であり、実際の設定を保証するものではありません。")